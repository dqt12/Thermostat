<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\12345\obj\HT32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\12345\obj\HT32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Tue Jan 23 09:48:39 2018
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; IAP_Handler &rArr; IAP_Download &rArr; xmodem &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[fc]">_USBD_CopyMemory</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fc]">_USBD_CopyMemory</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[4e]">AES_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">AES_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC_IRQHandler</a> from ht32f1xxxx_01_it.o(i.ADC_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2d]">BFTM0_IRQHandler</a> from ht32f1xxxx_01_it.o(i.BFTM0_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2e]">BFTM1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[c]">BOD_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from ht32f1xxxx_01_it.o(i.BusFault_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[a]">CKRDY_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[21]">COMP_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from ht32f1xxxx_01_it.o(i.DebugMon_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[46]">EBI_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[f]">EVWUP_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from ht32f1xxxx_01_it.o(i.EXTI0_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1b]">EXTI10_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1c]">EXTI11_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1d]">EXTI12_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1e]">EXTI13_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1f]">EXTI14_IRQHandler</a> from ht32f1xxxx_01_it.o(i.EXTI14_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[20]">EXTI15_IRQHandler</a> from ht32f1xxxx_01_it.o(i.EXTI15_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[16]">EXTI5_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[17]">EXTI6_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[18]">EXTI7_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[19]">EXTI8_IRQHandler</a> from ht32f1xxxx_01_it.o(i.EXTI8_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1a]">EXTI9_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2b]">GPTM0_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2c]">GPTM1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f1xxxx_01_it.o(i.HardFault_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2f]">I2C0_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[30]">I2C1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[37]">I2S_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[10]">LPWUP_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[23]">MCTM0BRK_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[26]">MCTM0CC_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[25]">MCTM0TR_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[24]">MCTM0UP_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[27]">MCTM1BRK_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[2a]">MCTM1CC_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[29]">MCTM1TR_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[28]">MCTM1UP_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from ht32f1xxxx_01_it.o(i.MemManage_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f1xxxx_01_it.o(i.NMI_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3a]">PDMA_CH0_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[44]">PDMA_CH10_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[45]">PDMA_CH11_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3b]">PDMA_CH1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3c]">PDMA_CH2_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3d]">PDMA_CH3_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3e]">PDMA_CH4_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[3f]">PDMA_CH5_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[40]">PDMA_CH6_IRQHandler</a> from ht32f1xxxx_01_it.o(i.PDMA_CH6_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[41]">PDMA_CH7_IRQHandler</a> from ht32f1xxxx_01_it.o(i.PDMA_CH7_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[42]">PDMA_CH8_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[43]">PDMA_CH9_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from ht32f1xxxx_01_it.o(i.PendSV_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from ht32f1xxxx_01_it.o(i.RTC_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[4d]">Reset_Handler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[39]">SDIO_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[31]">SPI0_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[32]">SPI1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from ht32f1xxxx_01_it.o(i.SVC_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from ht32f1xxxx_01_it.o(i.SysTick_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_ht32f1xxxx_02.o(i.SystemInit) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[35]">UART0_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[36]">UART1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[33]">USART0_IRQHandler</a> from ht32f1xxxx_01_it.o(i.USART0_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[34]">USART1_IRQHandler</a> from startup_ht32f1xxxx_01.o(RESET) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[4b]">USBDClass_Endpoint3</a> from ht32_usbd_class.o(i.USBDClass_Endpoint3) referenced from ht32_usbd_class.o(i.USBDClass_Init)
 <LI><a href="#[4a]">USBDClass_Request</a> from ht32_usbd_class.o(i.USBDClass_Request) referenced from ht32_usbd_class.o(i.USBDClass_Init)
 <LI><a href="#[38]">USB_IRQHandler</a> from ht32f1xxxx_01_it.o(i.USB_IRQHandler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from ht32f1xxxx_01_it.o(i.UsageFault_Handler) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f1xxxx_01.o(RESET)
 <LI><a href="#[4c]">_sputc</a> from printfb.o(i._sputc) referenced from printfb.o(i.__0sprintf$bare)
 <LI><a href="#[49]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))

<P><STRONG><a name="[4e]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>

<P><STRONG><a name="[2e]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CKRDY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CSIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[46]"></a>EBI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>LPWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>MCTM0BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>MCTM0CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>MCTM0TR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MCTM0UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MCTM1BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MCTM1CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MCTM1TR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCTM1UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PDMA_CH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>PDMA_CH10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PDMA_CH11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PDMA_CH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PDMA_CH2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>PDMA_CH3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PDMA_CH4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PDMA_CH5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PDMA_CH8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PDMA_CH9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[39]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f1xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[110]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[111]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[112]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[113]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[114]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[54]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculation_calibration
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculation_calibration
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculation_calibration
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculation_calibration
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculation_calibration
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculation_calibration
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculation_calibration
</UL>

<P><STRONG><a name="[115]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[55]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[116]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>ADC_ClearIntPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1xxxx_adc.o(i.ADC_ClearIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[5d]"></a>ADC_Configuration</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, main.o(i.ADC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_Configuration &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetADCPrescaler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularTrigConfig
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularGroupConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntConfig
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>ADC_Filer</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, touch_screen_adc.o(i.ADC_Filer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Filer
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TS_READ_Y
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TS_READ_X
</UL>

<P><STRONG><a name="[68]"></a>ADC_GetConversionData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1xxxx_adc.o(i.ADC_GetConversionData))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[22]"></a>ADC_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ht32f1xxxx_01_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionData
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>ADC_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_adc.o(i.ADC_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[61]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ht32f1xxxx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[60]"></a>ADC_RegularGroupConfig</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht32f1xxxx_adc.o(i.ADC_RegularGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_RegularGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[62]"></a>ADC_RegularTrigConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1xxxx_adc.o(i.ADC_RegularTrigConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[66]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f1xxxx_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[69]"></a>ADC_TS_READ_X</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, touch_screen_adc.o(i.ADC_TS_READ_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_TS_READ_X &rArr; Read_X_PIN &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X_PIN
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Filer
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_MeasureXY
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CheckPressed
</UL>

<P><STRONG><a name="[6c]"></a>ADC_TS_READ_Y</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, touch_screen_adc.o(i.ADC_TS_READ_Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_TS_READ_Y &rArr; Read_Y_PIN &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y_PIN
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Filer
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_MeasureXY
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CheckPressed
</UL>

<P><STRONG><a name="[88]"></a>AFIO_EXTISourceConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ht32f1xxxx_gpio.o(i.AFIO_EXTISourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AFIO_EXTISourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_PBInit
</UL>

<P><STRONG><a name="[5f]"></a>AFIO_GPxConfig</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ht32f1xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_PBInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZH_GPTM_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y_PIN
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X_PIN
</UL>

<P><STRONG><a name="[2d]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ht32f1xxxx_01_it.o(i.BFTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BFTM0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_ClearFlag
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME_SLICE_CHECK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>BFTM_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f1xxxx_bftm.o(i.BFTM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>BFTM_Configuration</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.BFTM_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BFTM_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCounter
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_SetCompare
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_IntConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_EnaCmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>BFTM_EnaCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_bftm.o(i.BFTM_EnaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Configuration
</UL>

<P><STRONG><a name="[73]"></a>BFTM_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_bftm.o(i.BFTM_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Configuration
</UL>

<P><STRONG><a name="[71]"></a>BFTM_SetCompare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1xxxx_bftm.o(i.BFTM_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Configuration
</UL>

<P><STRONG><a name="[72]"></a>BFTM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1xxxx_bftm.o(i.BFTM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Configuration
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>CKCU_Configuration</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.CKCU_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_Configuration &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, ht32f1xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_PBInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_Configuration
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZH_GPTM_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HT32F_DVB_ClockConfig
</UL>

<P><STRONG><a name="[5e]"></a>CKCU_SetADCPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1xxxx_ckcu.o(i.CKCU_SetADCPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[102]"></a>CKCU_SetUSBPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1xxxx_ckcu.o(i.CKCU_SetUSBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
</UL>

<P><STRONG><a name="[10e]"></a>CRC16</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, iap_crc16.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem
</UL>

<P><STRONG><a name="[90]"></a>CRC_InitTable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, iap_crc16.o(i.CRC_InitTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_InitTable
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
</UL>

<P><STRONG><a name="[77]"></a>Calculation_calibration</STRONG> (Thumb, 890 bytes, Stack size 72 bytes, touch_screen.o(i.Calculation_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Calculation_calibration &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>Delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_CounterCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>DelayT</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, touch_screen.o(i.DelayT))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
</UL>

<P><STRONG><a name="[7c]"></a>Display_Temp</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main.o(i.Display_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Display_Temp &rArr; LCD_DrawString &rArr; LCD_DrawChar &rArr; LCD_SetDisplayArea
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>EBI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_ebi.o(i.EBI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[99]"></a>EBI_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, ht32f1xxxx_ebi.o(i.EBI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EBI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f1xxxx_01_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f1xxxx_01_it.o(i.EXTI14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI14_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f1xxxx_01_it.o(i.EXTI15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f1xxxx_01_it.o(i.EXTI8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI8_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearEdgeFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>EXTI_ClearEdgeFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1xxxx_exti.o(i.EXTI_ClearEdgeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI8_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI14_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>EXTI_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f1xxxx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_PBInit
</UL>

<P><STRONG><a name="[89]"></a>EXTI_IntConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f1xxxx_exti.o(i.EXTI_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_PBInit
</UL>

<P><STRONG><a name="[d9]"></a>EnQueue</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, queue.o(i.EnQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EnQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>GPIO_ClearOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_ClearOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteStatus
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Wakeup
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[85]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_PBInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y_PIN
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X_PIN
</UL>

<P><STRONG><a name="[b1]"></a>GPIO_DriveConfig</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, ht32f1xxxx_gpio.o(i.GPIO_DriveConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_DriveConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y_PIN
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X_PIN
</UL>

<P><STRONG><a name="[86]"></a>GPIO_InputConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_PBInit
</UL>

<P><STRONG><a name="[84]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_PBInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y_PIN
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X_PIN
</UL>

<P><STRONG><a name="[81]"></a>GPIO_ReadInBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_PBGetState
</UL>

<P><STRONG><a name="[98]"></a>GPIO_SetOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_SetOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitDMA_Finished
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteStatus
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Wakeup
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[b2]"></a>GPIO_WriteOutBits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1xxxx_gpio.o(i.GPIO_WriteOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Y_PIN
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_X_PIN
</UL>

<P><STRONG><a name="[80]"></a>HT32F_DVB_PBGetState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32_board.o(i.HT32F_DVB_PBGetState))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>HT32F_DVB_PBInit</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, ht32_board.o(i.HT32F_DVB_PBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HT32F_DVB_PBInit &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_EXTISourceConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_IntConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HT32F_DVB_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IAP_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, iap_handler.o(i.IAP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IAP_Handler &rArr; IAP_Download &rArr; xmodem &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteStatus
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Download
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_InitTable
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>LCD_BackColorSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_BackColorSet))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TEST
</UL>

<P><STRONG><a name="[93]"></a>LCD_Clear</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StarterSet
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
</UL>

<P><STRONG><a name="[95]"></a>LCD_Config</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Config &rArr; EBI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBI_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>LCD_DrawBigChar</STRONG> (Thumb, 162 bytes, Stack size 36 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_DrawBigChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_DrawBigChar &rArr; LCD_SetDisplayArea
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayArea
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TEST
</UL>

<P><STRONG><a name="[9c]"></a>LCD_DrawChar</STRONG> (Thumb, 154 bytes, Stack size 36 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_DrawChar &rArr; LCD_SetDisplayArea
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayArea
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TEST
</UL>

<P><STRONG><a name="[9d]"></a>LCD_DrawFillRect</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_DrawFillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_DrawFillRect &rArr; LCD_SetDisplayArea
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDisplayArea
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TEST
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
</UL>

<P><STRONG><a name="[9e]"></a>LCD_DrawLine</STRONG> (Thumb, 72 bytes, Stack size 28 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_DrawLine
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAMWord
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StarterSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TEST
</UL>

<P><STRONG><a name="[a0]"></a>LCD_DrawPoint</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StarterSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TEST
</UL>

<P><STRONG><a name="[a1]"></a>LCD_DrawRect</STRONG> (Thumb, 78 bytes, Stack size 28 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_DrawRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_DrawRect &rArr; LCD_DrawLine
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TEST
</UL>

<P><STRONG><a name="[7d]"></a>LCD_DrawString</STRONG> (Thumb, 78 bytes, Stack size 44 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_DrawString &rArr; LCD_DrawChar &rArr; LCD_SetDisplayArea
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TEST
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Temp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
</UL>

<P><STRONG><a name="[a2]"></a>LCD_Init</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_Init &rArr; ZH_GPTM_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZH_GPTM_Switch
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZH_GPTM_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZH_GPTM_CCR_Num
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZH_GPTMCH_Switch
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBI_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBI_Cmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>LCD_SetDisplayArea</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_SetDisplayArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_SetDisplayArea
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBigChar
</UL>

<P><STRONG><a name="[7e]"></a>LCD_ShowNum</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_ShowNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_ShowNum &rArr; LCD_DrawChar &rArr; LCD_SetDisplayArea
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Temp
</UL>

<P><STRONG><a name="[94]"></a>LCD_StarterSet</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_StarterSet))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[a8]"></a>LCD_TEST</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, main.o(i.LCD_TEST))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = LCD_TEST &rArr; LCD_DrawString &rArr; LCD_DrawChar &rArr; LCD_SetDisplayArea
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextColorSet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawChar
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBigChar
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BackColorSet
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>LCD_TextColorSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_TextColorSet))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TEST
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
</UL>

<P><STRONG><a name="[9f]"></a>LCD_WriteRAMWord</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcm_ssd1963_480x272_5inch.o(i.LCD_WriteRAMWord))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>NVIC_Configuration</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Configuration &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingSystemHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>NVIC_SetPendingSystemHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.NVIC_SetPendingSystemHandler))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[40]"></a>PDMA_CH6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.PDMA_CH6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PDMA_CH7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.PDMA_CH7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>PDMA_ClearFlag</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ht32f1xxxx_pdma.o(i.PDMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitDMA_Finished
</UL>

<P><STRONG><a name="[c2]"></a>PDMA_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ht32f1xxxx_pdma.o(i.PDMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitDMA_Finished
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>PutStrToUSB</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ht32_usbd_class.o(i.PutStrToUSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PutStrToUSB &rArr; WriteByteToUSB &rArr; USBD_EPTWriteINData &rArr; USBD_EPTGetTransferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteToUSB
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Download
</UL>

<P><STRONG><a name="[f2]"></a>RSTCU_PeripReset</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, ht32f1xxxx_rstcu.o(i.RSTCU_PeripReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
</UL>

<P><STRONG><a name="[b0]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f1xxxx_rtc.o(i.RTC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht32f1xxxx_01_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>ReadBuffer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iap_buffer.o(i.ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Download
</UL>

<P><STRONG><a name="[6a]"></a>Read_X_PIN</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, touch_screen_adc.o(i.Read_X_PIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read_X_PIN &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TS_READ_X
</UL>

<P><STRONG><a name="[6d]"></a>Read_Y_PIN</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, touch_screen_adc.o(i.Read_Y_PIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read_Y_PIN &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteOutBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DriveConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TS_READ_Y
</UL>

<P><STRONG><a name="[b9]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[c5]"></a>SPI_DUALCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_spi.o(i.SPI_DUALCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitDMA_Finished
</UL>

<P><STRONG><a name="[b3]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, spi_flash_mx66l51235f.o(i.SPI_FLASH_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SCREEN_INIT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem
</UL>

<P><STRONG><a name="[b5]"></a>SPI_FLASH_BufferWrite</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, spi_flash_mx66l51235f.o(i.SPI_FLASH_BufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SCREEN_INIT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem
</UL>

<P><STRONG><a name="[91]"></a>SPI_FLASH_Init</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, spi_flash_mx66l51235f.o(i.SPI_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_FLASH_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SELOutputCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>SPI_FLASH_PageWrite</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, spi_flash_mx66l51235f.o(i.SPI_FLASH_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>

<P><STRONG><a name="[bd]"></a>SPI_FLASH_SectorErase</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi_flash_mx66l51235f.o(i.SPI_FLASH_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_SectorErase &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SCREEN_INIT
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem
</UL>

<P><STRONG><a name="[b4]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, spi_flash_mx66l51235f.o(i.SPI_FLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFIFOStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteStatus
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Wakeup
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[c1]"></a>SPI_FLASH_WaitDMA_Finished</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi_flash_mx66l51235f.o(i.SPI_FLASH_WaitDMA_Finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_FLASH_WaitDMA_Finished
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMACmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DUALCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_GetFlagStatus
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_ClearFlag
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Wakeup
</UL>

<P><STRONG><a name="[bc]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi_flash_mx66l51235f.o(i.SPI_FLASH_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[ba]"></a>SPI_FLASH_Wakeup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi_flash_mx66l51235f.o(i.SPI_FLASH_Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_Wakeup &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitDMA_Finished
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[bb]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi_flash_mx66l51235f.o(i.SPI_FLASH_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>

<P><STRONG><a name="[92]"></a>SPI_FLASH_WriteStatus</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spi_flash_mx66l51235f.o(i.SPI_FLASH_WriteStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_FLASH_WriteStatus &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
</UL>

<P><STRONG><a name="[be]"></a>SPI_GetFIFOStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_spi.o(i.SPI_GetFIFOStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[b7]"></a>SPI_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ht32f1xxxx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[c4]"></a>SPI_PDMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1xxxx_spi.o(i.SPI_PDMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitDMA_Finished
</UL>

<P><STRONG><a name="[bf]"></a>SPI_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1xxxx_spi.o(i.SPI_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[b8]"></a>SPI_SELOutputCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_spi.o(i.SPI_SELOutputCmd))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[c0]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1xxxx_spi.o(i.SPI_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>SYSTICK_ClockSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_ClockSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_configuration
</UL>

<P><STRONG><a name="[7b]"></a>SYSTICK_CounterCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_CounterCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[ca]"></a>SYSTICK_IntConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_configuration
</UL>

<P><STRONG><a name="[c9]"></a>SYSTICK_SetReloadValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32_cm3_misc.o(i.SYSTICK_SetReloadValue))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_configuration
</UL>

<P><STRONG><a name="[c7]"></a>SYSTICK_configuration</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.SYSTICK_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSTICK_configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_SetReloadValue
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClockSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, system_ht32f1xxxx_02.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIME_SLICE_CHECK</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.TIME_SLICE_CHECK))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM0_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>TM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f1xxxx_tm.o(i.TM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZH_GPTM_Switch
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZH_GPTM_Init
</UL>

<P><STRONG><a name="[106]"></a>TM_OutputInit</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, ht32f1xxxx_tm.o(i.TM_OutputInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TM_OutputInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZH_GPTM_Init
</UL>

<P><STRONG><a name="[105]"></a>TM_TimeBaseInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ht32f1xxxx_tm.o(i.TM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZH_GPTM_Init
</UL>

<P><STRONG><a name="[cc]"></a>TOUCH_Calibration</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, touch_screen.o(i.TOUCH_Calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = TOUCH_Calibration &rArr; get_sample &rArr; LCD_DrawString &rArr; LCD_DrawChar &rArr; LCD_SetDisplayArea
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextColorSet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CheckPressed
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayT
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculation_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SCREEN_INIT
</UL>

<P><STRONG><a name="[ce]"></a>TOUCH_CheckPressed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, touch_screen.o(i.TOUCH_CheckPressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TOUCH_CheckPressed &rArr; ADC_TS_READ_Y &rArr; Read_Y_PIN &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TS_READ_Y
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TS_READ_X
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Logical_Coor_Get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
</UL>

<P><STRONG><a name="[d0]"></a>TOUCH_Logical_Coor_Get</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, touch_screen.o(i.TOUCH_Logical_Coor_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TOUCH_Logical_Coor_Get &rArr; TOUCH_MeasureXY &rArr; ADC_TS_READ_Y &rArr; Read_Y_PIN &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreUnstable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_MeasureXY
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CheckPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>TOUCH_MeasureXY</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, touch_screen.o(i.TOUCH_MeasureXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TOUCH_MeasureXY &rArr; ADC_TS_READ_Y &rArr; Read_Y_PIN &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TS_READ_Y
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TS_READ_X
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Logical_Coor_Get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample
</UL>

<P><STRONG><a name="[d3]"></a>TOUCH_SCREEN_INIT</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, touch_screen.o(i.TOUCH_SCREEN_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TOUCH_SCREEN_INIT &rArr; TOUCH_Calibration &rArr; get_sample &rArr; LCD_DrawString &rArr; LCD_DrawChar &rArr; LCD_SetDisplayArea
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>TimingDelay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.TimingDelay))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[33]"></a>USART0_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ht32f1xxxx_01_it.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART0_IRQHandler &rArr; EnQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f1xxxx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1xxxx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>USART_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1xxxx_usart.o(i.USART_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>USART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1xxxx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>USART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1xxxx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>USBDClass_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32_usbd_class.o(i.USBDClass_Init))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
</UL>

<P><STRONG><a name="[de]"></a>USBDCore_IRQHandler</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, ht32_usbd_core.o(i.USBDCore_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBDCore_IRQHandler &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadSETUPData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOff
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetINT
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEPTnINTNumber
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableINT
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClearINT
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>USBDCore_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32_usbd_core.o(i.USBDCore_Init))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
</UL>

<P><STRONG><a name="[f0]"></a>USBDCore_MainRoutine</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ht32_usbd_core.o(i.USBDCore_MainRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBDCore_MainRoutine &rArr; USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
</UL>

<P><STRONG><a name="[103]"></a>USBDDesc_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32_usbd_descriptor.o(i.USBDDesc_Init))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
</UL>

<P><STRONG><a name="[e0]"></a>USBD_ClearINT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_ClearINT))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>USBD_DPWakeUpCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_DPWakeUpCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>

<P><STRONG><a name="[100]"></a>USBD_DPpullupCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_DPpullupCmd))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>

<P><STRONG><a name="[e2]"></a>USBD_DeInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>USBD_EPTClearDTG</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTClearDTG))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearDTG
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[f5]"></a>USBD_EPTClearHalt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTClearHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[ea]"></a>USBD_EPTClearINT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTClearINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTClearINT
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>USBD_EPTGetBuffer0Addr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTGetBuffer0Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetBuffer0Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[f7]"></a>USBD_EPTGetBuffer1Addr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTGetBuffer1Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[f8]"></a>USBD_EPTGetBufferLen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTGetBufferLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
</UL>

<P><STRONG><a name="[f9]"></a>USBD_EPTGetHalt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTGetHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetStatus
</UL>

<P><STRONG><a name="[e6]"></a>USBD_EPTGetINT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTGetINT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetINT
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>USBD_EPTGetTransferCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTGetTransferCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTGetTransferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteToUSB
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_Endpoint3
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
</UL>

<P><STRONG><a name="[e4]"></a>USBD_EPTInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReset
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[fb]"></a>USBD_EPTReadMemory</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTReadMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
</UL>

<P><STRONG><a name="[dd]"></a>USBD_EPTReadOUTData</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTReadOUTData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_Endpoint3
</UL>

<P><STRONG><a name="[fa]"></a>USBD_EPTReset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
</UL>

<P><STRONG><a name="[e9]"></a>USBD_EPTSendSTALL</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTSendSTALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTSendSTALL
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>USBD_EPTSetHalt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTSetHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTSetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
</UL>

<P><STRONG><a name="[ec]"></a>USBD_EPTWriteINData</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ht32f1xxxx_usbd.o(i.USBD_EPTWriteINData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_EPTWriteINData &rArr; USBD_EPTGetTransferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_GetEPTnAddr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteToUSB
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_ControlIN
</UL>

<P><STRONG><a name="[e5]"></a>USBD_EnableINT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_EnableINT))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>

<P><STRONG><a name="[ed]"></a>USBD_GetEPTnINTNumber</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_GetEPTnINTNumber))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>USBD_GetINT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_GetINT))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>USBD_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_Init))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_Init
</UL>

<P><STRONG><a name="[e1]"></a>USBD_PowerOff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_PowerOff))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>USBD_PowerOn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>USBD_PowerUp</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, ht32f1xxxx_usbd.o(i.USBD_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPpullupCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableINT
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPWakeUpCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_MainRoutine
</UL>

<P><STRONG><a name="[fe]"></a>USBD_PreInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_PreInit))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[e7]"></a>USBD_ReadSETUPData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_ReadSETUPData))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>USBD_SetAddress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i.USBD_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[101]"></a>USB_Configuration</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(i.USB_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_Configuration &rArr; USBDCore_MainRoutine &rArr; USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPpullupCmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDesc_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_MainRoutine
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_SetUSBPrescaler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>USB_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_IRQHandler &rArr; USBDCore_IRQHandler &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f1xxxx_01_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f1xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>WriteByteToUSB</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht32_usbd_class.o(i.WriteByteToUSB))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteByteToUSB &rArr; USBD_EPTWriteINData &rArr; USBD_EPTGetTransferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_stop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutStrToUSB
</UL>

<P><STRONG><a name="[a7]"></a>ZH_GPTMCH_Switch</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, zh_gptm.o(i.ZH_GPTMCH_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[a5]"></a>ZH_GPTM_CCR_Num</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, zh_gptm.o(i.ZH_GPTM_CCR_Num))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[a4]"></a>ZH_GPTM_Init</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, zh_gptm.o(i.ZH_GPTM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ZH_GPTM_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_OutputInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[a6]"></a>ZH_GPTM_Switch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, zh_gptm.o(i.ZH_GPTM_Switch))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[d2]"></a>_StoreUnstable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, touch_screen.o(i._StoreUnstable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _StoreUnstable
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Logical_Coor_Get
</UL>

<P><STRONG><a name="[10b]"></a>__0sprintf$bare</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfb.o(i.__0sprintf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[117]"></a>__1sprintf$bare</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfb.o(i.__0sprintf$bare), UNUSED)

<P><STRONG><a name="[8b]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfb.o(i.__0sprintf$bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Download
</UL>

<P><STRONG><a name="[118]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[119]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[11a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[d5]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SCREEN_INIT
</UL>

<P><STRONG><a name="[cd]"></a>get_sample</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, touch_screen.o(i.get_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_sample &rArr; LCD_DrawString &rArr; LCD_DrawChar &rArr; LCD_SetDisplayArea
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextColorSet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_MeasureXY
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_CheckPressed
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayT
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Calibration
</UL>

<P><STRONG><a name="[49]"></a>main</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = main &rArr; IAP_Handler &rArr; IAP_Download &rArr; xmodem &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SCREEN_INIT
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Logical_Coor_Get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TextColorSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawString
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawFillRect
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BackColorSet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_PBInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_PBGetState
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_configuration
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_TEST
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Temp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_Configuration
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Configuration
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d4]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_SCREEN_INIT
</UL>

<P><STRONG><a name="[8e]"></a>xmodem</STRONG> (Thumb, 304 bytes, Stack size 168 bytes, iap_xmodem.o(i.xmodem))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = xmodem &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_stop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBuffer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteToUSB
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Download
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[64]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BFTM_Configuration
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>

<P><STRONG><a name="[ac]"></a>NVIC_EncodePriority</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, main.o(i.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[ad]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[4b]"></a>USBDClass_Endpoint3</STRONG> (Thumb, 88 bytes, Stack size 88 bytes, ht32_usbd_class.o(i.USBDClass_Endpoint3))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBDClass_Endpoint3 &rArr; USBD_EPTReadOUTData &rArr; USBD_EPTReadMemory &rArr; USBD_EPTGetBuffer1Addr &rArr; USBD_EPTGetBufferLen
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ht32_usbd_class.o(i.USBDClass_Init)
</UL>
<P><STRONG><a name="[4a]"></a>USBDClass_Request</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ht32_usbd_class.o(i.USBDClass_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDClass_Request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ht32_usbd_class.o(i.USBDClass_Init)
</UL>
<P><STRONG><a name="[8a]"></a>IAP_Download</STRONG> (Thumb, 118 bytes, Stack size 136 bytes, iap_handler.o(i.IAP_Download))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = IAP_Download &rArr; xmodem &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBuffer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutStrToUSB
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Handler
</UL>

<P><STRONG><a name="[10d]"></a>xmodem_stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iap_xmodem.o(i.xmodem_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xmodem_stop &rArr; WriteByteToUSB &rArr; USBD_EPTWriteINData &rArr; USBD_EPTGetTransferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByteToUSB
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem
</UL>

<P><STRONG><a name="[c6]"></a>delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_flash_mx66l51235f.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Wakeup
</UL>

<P><STRONG><a name="[97]"></a>delay_ms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcm_ssd1963_480x272_5inch.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[eb]"></a>_USBDCore_ControlIN</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_ControlIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _USBDCore_ControlIN &rArr; USBD_EPTWriteINData &rArr; USBD_EPTGetTransferCount
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>_USBDCore_Standard_GetStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ht32_usbd_core.o(i._USBDCore_Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _USBDCore_Standard_GetStatus &rArr; USBD_EPTGetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[e8]"></a>_USBDCore_Standard_Request</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _USBDCore_Standard_Request &rArr; USBD_EPTInit &rArr; USBD_EPTReset
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_SetClearFeature
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>_USBDCore_Standard_SetClearFeature</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ht32_usbd_core.o(i._USBDCore_Standard_SetClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _USBDCore_Standard_SetClearFeature &rArr; USBD_EPTSetHalt
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBDCore_Standard_Request
</UL>

<P><STRONG><a name="[fc]"></a>_USBD_CopyMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i._USBD_CopyMemory))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadMemory
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>

<P><STRONG><a name="[f4]"></a>_USBD_GetEPTnAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f1xxxx_usbd.o(i._USBD_GetEPTnAddr))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetTransferCount
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReset
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer1Addr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBuffer0Addr
</UL>

<P><STRONG><a name="[83]"></a>_HT32F_DVB_ClockConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ht32_board.o(i._HT32F_DVB_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _HT32F_DVB_ClockConfig &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_PBInit
</UL>

<P><STRONG><a name="[10c]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$bare
</UL>

<P><STRONG><a name="[4c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfb.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0sprintf$bare)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
